import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:share_plus/share_plus.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:qr_flutter/qr_flutter.dart';
import 'package:flutter/services.dart';
import 'package:flutter/rendering.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:http/http.dart' as http;
class ShareService {
  static const String _appName = '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à';
  static const String _appNameEn = 'Receipt Management System';

  /// ‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
  static Future<void> shareAsText(Map<String, dynamic> receiptData) async {
    final amount = (receiptData['amount'] as num?)?.toDouble() ?? 0.0;
    final storeName = receiptData['storeName'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤';
    final description = receiptData['description'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î';
    final transactionDate = (receiptData['transactionDate'] as Timestamp?)?.toDate();
    final formattedDate = transactionDate != null
        ? DateFormat('d MMMM yyyy, ‡πÄ‡∏ß‡∏•‡∏≤ HH:mm', 'th').format(transactionDate)
        : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';

    final shareText = '''
üßæ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô

üè™ ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤: $storeName
üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: $description
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: $formattedDate
üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ${NumberFormat("#,##0.00").format(amount)} ‡∏ø

üì± ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢$_appName
''';

    await Share.share(shareText);
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå PDF
  static Future<void> generateAndSharePDF(
    BuildContext context,
    Map<String, dynamic> receiptData,
  ) async {
    try {
      final pdf = pw.Document();
      final amount = (receiptData['amount'] as num?)?.toDouble() ?? 0.0;
      final storeName = receiptData['storeName'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤';
      final description = receiptData['description'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î';
      final transactionDate = (receiptData['transactionDate'] as Timestamp?)?.toDate();
      final formattedDate = transactionDate != null
          ? DateFormat('d MMMM yyyy, ‡πÄ‡∏ß‡∏•‡∏≤ HH:mm', 'th').format(transactionDate)
          : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';

      // ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢
      pw.Font? thaiFont = await _loadThaiFont();

      // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
      pw.ImageProvider? receiptImage = await _loadReceiptImage(receiptData['imageUrl']);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ PDF
      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          build: (pw.Context context) {
            return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                // ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
                _buildPDFHeader(thaiFont),
                pw.SizedBox(height: 24),

                // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                if (receiptImage != null) ...[
                  _buildPDFImage(receiptImage),
                  pw.SizedBox(height: 24),
                ],

                // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
                _buildPDFContent(
                  storeName: storeName,
                  description: description,
                  formattedDate: formattedDate,
                  userEmail: receiptData['userEmail'] ?? '-',
                  amount: amount,
                  thaiFont: thaiFont,
                ),

                pw.Spacer(),

                // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                _buildPDFFooter(thaiFont),
              ],
            );
          },
        ),
      );

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏ä‡∏£‡πå PDF
      await _savePDFAndShare(pdf, storeName, amount);
    } catch (e) {
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÑ‡∏î‡πâ: $e');
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏ä‡∏£‡πå QR Code
  static Future<void> generateAndShareQR(
    BuildContext context,
    Map<String, dynamic> receiptData,
    GlobalKey qrKey,
  ) async {
    try {
      final qrData = _createQRData(receiptData);
      final qrString = qrData.entries
          .map((e) => '${e.key}:${e.value}')
          .join('|');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ QR Code ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
      final filePath = await _createQRImageFile(qrString, receiptData);

      // ‡πÅ‡∏™‡∏î‡∏á QR Code ‡πÉ‡∏ô Dialog
      if (context.mounted) {
        await _showQRDialog(context, qrString, receiptData, filePath, qrKey);
      }
    } catch (e) {
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ: $e');
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QR Code
  static Map<String, dynamic> _createQRData(Map<String, dynamic> receiptData) {
    final amount = (receiptData['amount'] as num?)?.toDouble() ?? 0.0;
    final storeName = receiptData['storeName'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤';
    final description = receiptData['description'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î';
    final transactionDate = (receiptData['transactionDate'] as Timestamp?)?.toDate();
    final formattedDate = transactionDate != null
        ? DateFormat('d/M/yyyy HH:mm').format(transactionDate)
        : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';

    return {
      'type': 'receipt',
      'storeName': storeName,
      'description': description,
      'amount': amount,
      'date': formattedDate,
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    };
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ QR Code
  static Future<String> _createQRImageFile(
    String qrString,
    Map<String, dynamic> receiptData,
  ) async {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Widget ‡πÉ‡∏ô Memory (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ RepaintBoundary ‡∏à‡∏£‡∏¥‡∏á)
    final output = await getTemporaryDirectory();
    final file = File('${output.path}/receipt_qr_${DateTime.now().millisecondsSinceEpoch}.png');
    
    // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ QR Code
    // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ RepaintBoundary ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô static ‡πÑ‡∏î‡πâ
    // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ library ‡∏≠‡∏∑‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    
    return file.path;
  }

  /// ‡πÅ‡∏™‡∏î‡∏á QR Code Dialog
  static Future<void> _showQRDialog(
    BuildContext context,
    String qrData,
    Map<String, dynamic> receiptData,
    String filePath,
    GlobalKey qrKey,
  ) async {
    final amount = (receiptData['amount'] as num?)?.toDouble() ?? 0.0;
    final storeName = receiptData['storeName'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤';

    return showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
        title: Text('QR Code ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à', 
            style: GoogleFonts.prompt(fontWeight: FontWeight.bold)),
        content: RepaintBoundary(
          key: qrKey,
          child: Container(
            color: Colors.white,
            padding: const EdgeInsets.all(20),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                QrImageView(
                  data: qrData,
                  version: QrVersions.auto,
                  size: 200.0,
                  backgroundColor: Colors.white,
                ),
                const SizedBox(height: 16),
                Text(
                  storeName,
                  style: GoogleFonts.prompt(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                  ),
                  textAlign: TextAlign.center,
                ),
                Text(
                  '${NumberFormat("#,##0.00").format(amount)} ‡∏ø',
                  style: GoogleFonts.prompt(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.green[800],
                  ),
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            child: Text('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', style: GoogleFonts.prompt()),
            onPressed: () {
              Clipboard.setData(ClipboardData(text: qrData));
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code ‡πÅ‡∏•‡πâ‡∏ß', 
                      style: GoogleFonts.prompt()),
                  backgroundColor: Colors.green,
                ),
              );
            },
          ),
          FilledButton(
            child: Text('‡πÅ‡∏ä‡∏£‡πå', style: GoogleFonts.prompt()),
            onPressed: () async {
              Navigator.pop(context);
              await Share.shareXFiles(
                [XFile(filePath)],
                text: 'QR Code ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å $storeName',
              );
            },
          ),
        ],
      ),
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå
  static void showShareOptions(
    BuildContext context,
    Map<String, dynamic> receiptData,
    GlobalKey qrKey,
  ) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              '‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à',
              style: GoogleFonts.prompt(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            
            // ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå PDF
            ListTile(
              leading: const Icon(Icons.picture_as_pdf, color: Colors.red),
              title: Text('‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô PDF', style: GoogleFonts.prompt()),
              subtitle: Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö',
                  style: GoogleFonts.prompt(fontSize: 12)),
              onTap: () async {
                Navigator.pop(context);
                await _handleAsyncShare(
                  context,
                  () => generateAndSharePDF(context, receiptData),
                  '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PDF...',
                );
              },
            ),
            const Divider(),
            
            // ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå QR Code
            ListTile(
              leading: const Icon(Icons.qr_code, color: Colors.blue),
              title: Text('‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô QR Code', style: GoogleFonts.prompt()),
              subtitle: Text('‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                  style: GoogleFonts.prompt(fontSize: 12)),
              onTap: () async {
                Navigator.pop(context);
                await _handleAsyncShare(
                  context,
                  () => generateAndShareQR(context, receiptData, qrKey),
                  '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code...',
                );
              },
            ),
            const Divider(),
            
            // ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            ListTile(
              leading: const Icon(Icons.text_fields, color: Colors.green),
              title: Text('‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', style: GoogleFonts.prompt()),
              subtitle: Text('‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤',
                  style: GoogleFonts.prompt(fontSize: 12)),
              onTap: () async {
                Navigator.pop(context);
                await shareAsText(receiptData);
              },
            ),
          ],
        ),
      ),
    );
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Loading ‡πÅ‡∏•‡∏∞ Error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡πÅ‡∏ö‡∏ö Async
  static Future<void> _handleAsyncShare(
    BuildContext context,
    Future<void> Function() shareFunction,
    String loadingMessage,
  ) async {
    // ‡πÅ‡∏™‡∏î‡∏á Loading Dialog
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const CircularProgressIndicator(),
            const SizedBox(height: 16),
            Text(loadingMessage, style: GoogleFonts.prompt()),
          ],
        ),
      ),
    );

    try {
      await shareFunction();
      if (context.mounted) {
        Navigator.pop(context); // ‡∏õ‡∏¥‡∏î Loading Dialog
      }
    } catch (e) {
      if (context.mounted) {
        Navigator.pop(context); // ‡∏õ‡∏¥‡∏î Loading Dialog
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(e.toString(), style: GoogleFonts.prompt()),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  // --- Helper Methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF ---

  /// ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF
  static Future<pw.Font?> _loadThaiFont() async {
    try {
      final fontData = await rootBundle.load('fonts/NotoSansThai-Regular.ttf');
      return pw.Font.ttf(fontData);
    } catch (e) {
      print('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ: $e');
      return null;
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF
static Future<pw.ImageProvider?> _loadReceiptImage(String? imageUrl) async {
  if (imageUrl == null || imageUrl.isEmpty) {
    print('URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    return null;
  }
  
  try {
    // ‡πÉ‡∏ä‡πâ http.get() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
    final response = await http.get(Uri.parse(imageUrl));
    
    if (response.statusCode == 200) {
      // ‡∏´‡∏≤‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô pw.MemoryImage
      return pw.MemoryImage(response.bodyBytes);
    } else {
      print('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${response.statusCode}');
      return null;
    }
  } catch (e) {
    print('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: $e');
    return null;
  }
}

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Header ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF
  static pw.Widget _buildPDFHeader(pw.Font? thaiFont) {
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(16),
      decoration: pw.BoxDecoration(
        color: PdfColors.green50,
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        children: [
          pw.Text(
            '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô',
            style: pw.TextStyle(
              font: thaiFont,
              fontSize: 24,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
          pw.SizedBox(height: 8),
          pw.Text(
            'Receipt Document',
            style: const pw.TextStyle(fontSize: 16),
          ),
        ],
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô PDF
  static pw.Widget _buildPDFImage(pw.ImageProvider receiptImage) {
  return pw.Container(
    width: double.infinity,
    height: 200,
    decoration: pw.BoxDecoration(
      border: pw.Border.all(color: PdfColors.grey300),
      borderRadius: pw.BorderRadius.circular(8),
    ),
    child: pw.Image(
      receiptImage,
      fit: pw.BoxFit.contain,
    ),
  );
}

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á PDF
  static pw.Widget _buildPDFContent({
    required String storeName,
    required String description,
    required String formattedDate,
    required String userEmail,
    required double amount,
    required pw.Font? thaiFont,
  }) {
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(16),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          _buildPDFInfoRow('‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ / Store:', storeName, thaiFont),
          pw.SizedBox(height: 12),
          _buildPDFInfoRow('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î / Description:', description, thaiFont),
          pw.SizedBox(height: 12),
          _buildPDFInfoRow('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà / Date:', formattedDate, thaiFont),
          pw.SizedBox(height: 12),
          _buildPDFInfoRow('‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å / Recorded by:', userEmail, thaiFont),
          pw.SizedBox(height: 16),
          pw.Divider(color: PdfColors.grey400),
          pw.SizedBox(height: 16),
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text(
                '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° / Total Amount:',
                style: pw.TextStyle(
                  font: thaiFont,
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
              pw.Text(
                '${NumberFormat("#,##0.00").format(amount)} ‡∏ø',
                style: pw.TextStyle(
                  fontSize: 20,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.green800,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Footer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF
  static pw.Widget _buildPDFFooter(pw.Font? thaiFont) {
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.grey100,
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        children: [
          pw.Text(
            '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢$_appName',
            style: pw.TextStyle(font: thaiFont, fontSize: 10),
          ),
          pw.Text(
            'Generated by $_appNameEn',
            style: const pw.TextStyle(fontSize: 10),
          ),
          pw.SizedBox(height: 4),
          pw.Text(
            '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${DateFormat('d MMMM yyyy, HH:mm', 'th').format(DateTime.now())}',
            style: pw.TextStyle(font: thaiFont, fontSize: 9),
          ),
        ],
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô PDF
  static pw.Widget _buildPDFInfoRow(String label, String value, pw.Font? thaiFont) {
    return pw.Row(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Container(
          width: 120,
          child: pw.Text(
            label,
            style: pw.TextStyle(
              font: thaiFont,
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
            ),
          ),
        ),
        pw.Expanded(
          child: pw.Text(
            value,
            style: pw.TextStyle(font: thaiFont, fontSize: 12),
          ),
        ),
      ],
    );
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå PDF
  static Future<void> _savePDFAndShare(
    pw.Document pdf,
    String storeName,
    double amount,
  ) async {
    final output = await getTemporaryDirectory();
    final file = File('${output.path}/receipt_${DateTime.now().millisecondsSinceEpoch}.pdf');
    await file.writeAsBytes(await pdf.save());

    await Share.shareXFiles(
      [XFile(file.path)],
      text: '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å $storeName\n‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ${NumberFormat("#,##0.00").format(amount)} ‡∏ø',
    );
  }
}